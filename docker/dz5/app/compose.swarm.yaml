services:
  web:
    image: kolchinvladimir/app:1.0.0
    hostname: app
    environment:
      - DB_HOST=mysql
      - DB_USER=test
      - DB_PASSWORD=test
      - DB_NAME=test
      - MYSQL_ALLOW_EMPTY_PASSWORD=test
    ports:
      - "5000:5000"
    networks:
      - proxy-network
#    restart: on-failure
    depends_on:
      - db
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 2
#      update_config:
#        parallelism: 1
#        delay: 10s
#      restart_policy:
#        condition: on-failure
#
  db:
    image: mysql:8.0
    hostname: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=test
      - MYSQL_USER=test
      - MYSQL_PASSWORD=test
#      - MYSQL_RANDOM_ROOT_PASSWORD=test
#      - MYSQL_ALLOW_EMPTY_PASSWORD=test
      - MYSQL_DATABASE=test
    command: --default-authentication-plugin=caching_sha2_password
    ports:
      - "3306:3306"
    volumes:
      - volume_db:/var/lib/mysql
    networks:
      - proxy-network
#    healthcheck:
#      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
#      start_period: 5s
#      interval: 5s
#      timeout: 5s
#      retries: 55
#    restart: on-failure
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
#
  reverse-proxy:
    image: haproxy:2.4
#    restart: always
    hostname: proxy
    ports:
      - "8080:8080"
    volumes:
      - ./haproxy/reverse/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:rw
    networks:
      - proxy-network
    deploy:
      placement:
        constraints: [node.role == manager]
#      replicas: 1
#      update_config:
#        parallelism: 1
#        delay: 10s
#      restart_policy:
#        condition: on-failure
#
  ingress-proxy:
    image: nginx:latest
#    restart: always
    hostname: nginx
    ports:
      - "8090:8090"
    volumes:
      - ./nginx/ingress/default.conf:/etc/nginx/conf.d/default.conf:rw
      - ./nginx/ingress/nginx.conf:/etc/nginx/nginx.conf:rw
    networks:
      - proxy-network
    deploy:
      placement:
        constraints: [node.role == manager]
#      replicas: 1
#      update_config:
#        parallelism: 1
#        delay: 10s
#      restart_policy:
#        condition: on-failure
volumes:
  volume_db:

networks:
  proxy-network:
    driver: overlay # Используем overlay-сеть для связи между узлами
