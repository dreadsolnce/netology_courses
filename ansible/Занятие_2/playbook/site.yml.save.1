---
- name: Install Clickhouse
  hosts: clickhouse
  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        state: restarted
  tasks:
    - block:
        - name: Get clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
            dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
          with_items: "{{ clickhouse_packages }}"
      rescue:
        - name: Get clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
            dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
    - name: Install clickhouse packages
      become: true
      ansible.builtin.yum:
        name:
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
        disable_gpg_check: true
      notify: Start clickhouse service
    - name: Flush handlers
      meta: flush_handlers
    - name: Create database
      ansible.builtin.command: "clickhouse-client -q 'create database logs;'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc !=82
      changed_when: create_db.rc == 0

- name: Install vector
  hosts: clickhouse
  tasks:
    - name: Проверка наличия скачанного архива
      stat: 
        path: "./vector.tar.gz"
      register: res_archiv
      tags:
        - create_dir
    - name: Результат проверки
      debug:
        var: res_archiv

    - name: Скачиваем архив с программой vector
      get_url:
        url: "https://packages.timber.io/vector/{{vector_version}}/vector-{{vector_version}}-x86_64-unknown-linux-musl.tar.gz"
        dest: "./vector-{{vector_version}}.tar.gz"
      when: res_archiv.stat.exists == false
      tags:
        - create_dir
    
    - name: Проверка наличия директории с программой
      stat:
        path: "./{{vector_path}}"
      register: res_dir
      tags:
        - create_dir

    - name: Результат проверки
      debug:
        var: res_dir

    - name: Удаляем директорию если мы скачали новый архив и если папка существует
      file:
        path: "./{{vector_path}}"
        state: "absent"
        mode: "0755"
      when: 
        - res_dir.stat.exists == true 
        - res_archiv.stat.exists == false
      tags:
        - create_dir

    - name: Создаем директорию для программы
      file:
        path: "./vector"
        state: directory
        mode: "0755"
      tags:
        - create_dir
      when: res_archiv.stat.exists == false

    - name: Распаковываем архив
      unarchive: 
        src: "./vector-{{vector_version}}.tar.gz"
        dest: "./vector"
        remote_src: true
      when: res_archiv.stat.exists == false

#    - name: Переимновываем каталог
#      shell: 'rsync -av --delete ./vector/vector*/* ./vector/'

    - name: Переименовываем катало
      command: mv "./vector ./vector.new"
      when: res_archiv.stat.exists == false

    - name: Настраиваем программу
      shell: 'echo "export PATH=\"$(pwd)/vector/bin:\$PATH\"" >> $HOME/.profile'

